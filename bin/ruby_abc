#! /usr/bin/env ruby

require 'ruby_abc'
require 'optparse'

STDOUT.sync = true

options = {}

optparse = OptionParser.new do |opts|
	opts.banner = "Usage: #{File.basename(__FILE__)} [options] -i <input_file> -o <output_file>"

	options[:inputFileName] = nil
	opts.on('-i', '--input FILE', 'Input BLIF file') do |file|
		options[:inputFileName] = file
	end

	options[:outputFileName] = nil
	opts.on('-o', '--output FILE', 'Output netlist to FILE') do |file|
		options[:outputFileName] = file
	end

	options[:retime] = false
	opts.on('-r', '--retime', 'Retime netlist') do
		options[:retime] = true
	end

	options[:zero] = false
	opts.on('-z', '--zero', 'Set latches initial value to zero') do
		options[:zero] = true
	end

	options[:lcorr] = false
	opts.on('-l', '--lcorr', 'Computes latch correspondence using 1-step induction') do
		options[:lcorr] = true
	end

	options[:area] = false
	opts.on('-a', '--area', 'Optimize in area') do
		options[:area] = true
	end

	options[:sweep] = false
	opts.on('-w', '--sweep', 'Sweep logic network to remove dangling nodes') do
		options[:sweep] = true
	end

	options[:k] = nil
	opts.on('-k', '--lut_inputs K', "Map to K-input LUTs.") do |k|
		options[:k] = k.to_i
	end

	opts.on( '-h', '--help', 'Display this help' ) do
		puts opts
		exit
	end
end

optparse.parse!

abort "Missing input file name.\n#{optparse}" if options[:inputFileName].nil?

ABC::synthesis(
	input:   options[:inputFileName], 
	output:  options[:outputFileName], 
	zero:    options[:zero], 
	sweep:   options[:sweep],
	retime:  options[:retime], 
	lcorr:   options[:lcorr], 
	area:    options[:area], 
	lut_map: options[:k]
)

